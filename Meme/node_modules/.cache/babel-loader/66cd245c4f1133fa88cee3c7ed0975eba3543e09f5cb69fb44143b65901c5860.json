{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/ReactProjects/Meme/src/components/Meme.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Meme() {\n  _s();\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"https://i.imgflip.com/1ur9b0.jpg\"\n  });\n  const [allMemImages, setAllMemeImages] = React.useState([]);\n  function getMemeImage() {\n    const allMemImages = meme.memes;\n    const randomNumber = Math.floor(Math.random() * allMemImages.length);\n    const url = allMemImages[randomNumber].url;\n    setMeme(prevData => ({\n      ...prevData,\n      randomImage: url\n    }));\n  }\n  function handleChane(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  }\n  React.useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemeImages(data.data.memes));\n  }, []);\n  console.log(allMemImages);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        className: \"form--inputs\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handleChane\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottop text\",\n        className: \"form--inputs\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: handleChane\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--bottom\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image  \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme--image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n_s(Meme, \"+eJteN1ApZGQNIJEWn7R66ie6A0=\");\n_c = Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","Meme","meme","setMeme","useState","topText","bottomText","randomImage","allMemImages","setAllMemeImages","getMemeImage","memes","randomNumber","Math","floor","random","length","url","prevData","handleChane","event","name","value","target","useEffect","fetch","then","res","json","data","console","log"],"sources":["/Users/ywblhytr/Desktop/ReactProjects/Meme/src/components/Meme.js"],"sourcesContent":["import React from \"react\"\n\nexport function Meme(){\n    const [meme, setMeme] = React.useState({\n        topText: \"\",\n        bottomText: \"\",\n        randomImage: \"https://i.imgflip.com/1ur9b0.jpg\"\n        })\n\n    const [allMemImages ,setAllMemeImages] = React.useState([])\n    function getMemeImage(){\n        const allMemImages = meme.memes\n        const randomNumber = Math.floor(Math.random() * allMemImages.length)\n        const url = allMemImages[randomNumber].url\n        setMeme( \n            prevData => ({\n            ...prevData,\n            randomImage: url\n            })\n        )\n    }\n\n    function handleChane(event){\n        const {name, value} = event.target\n        setMeme(prevData =>({\n            ...prevData,\n            [name]:value\n         })\n        )\n    }\n    React.useEffect(()=>{fetch(\"https://api.imgflip.com/get_memes\")\n    .then(res => res.json())\n    .then(data => setAllMemeImages(data.data.memes))},[])\n    console.log(allMemImages)\n    return(\n        <main>\n            <div className=\"form\">\n                <input \n                    \n                    type=\"text\"\n                    placeholder=\"Top text\"\n                    className=\"form--inputs\" \n                    name=\"topText\"\n                    value={meme.topText}\n                    onChange = {handleChane}\n                    />\n                <input \n                    type=\"text\"\n                    placeholder=\"Bottop text\"\n                    className=\"form--inputs\" \n                    name=\"bottomText\"\n                    value={meme.bottomText}\n                    onChange = {handleChane}\n                />\n                <button \n                    className=\"form--bottom\"\n                    onClick={getMemeImage}\n                >\n                    Get a new meme image  ðŸ–¼\n                </button>\n                </div>\n                <div>\n                <img src={meme.randomImage} className = \"meme--image\"/>\n                <h2 className=\"meme--text top\">{meme.topText}</h2>\n                <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\n                </div>\n            \n        </main>\n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAEzB,OAAO,SAASC,IAAI,GAAE;EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGH,KAAK,CAACI,QAAQ,CAAC;IACnCC,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE;EACb,CAAC,CAAC;EAEN,MAAM,CAACC,YAAY,EAAEC,gBAAgB,CAAC,GAAGT,KAAK,CAACI,QAAQ,CAAC,EAAE,CAAC;EAC3D,SAASM,YAAY,GAAE;IACnB,MAAMF,YAAY,GAAGN,IAAI,CAACS,KAAK;IAC/B,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGP,YAAY,CAACQ,MAAM,CAAC;IACpE,MAAMC,GAAG,GAAGT,YAAY,CAACI,YAAY,CAAC,CAACK,GAAG;IAC1Cd,OAAO,CACHe,QAAQ,KAAK;MACb,GAAGA,QAAQ;MACXX,WAAW,EAAEU;IACb,CAAC,CAAC,CACL;EACL;EAEA,SAASE,WAAW,CAACC,KAAK,EAAC;IACvB,MAAM;MAACC,IAAI;MAAEC;IAAK,CAAC,GAAGF,KAAK,CAACG,MAAM;IAClCpB,OAAO,CAACe,QAAQ,KAAI;MAChB,GAAGA,QAAQ;MACX,CAACG,IAAI,GAAEC;IACV,CAAC,CAAC,CACF;EACL;EACAtB,KAAK,CAACwB,SAAS,CAAC,MAAI;IAACC,KAAK,CAAC,mCAAmC,CAAC,CAC9DC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIpB,gBAAgB,CAACoB,IAAI,CAACA,IAAI,CAAClB,KAAK,CAAC,CAAC;EAAA,CAAC,EAAC,EAAE,CAAC;EACrDmB,OAAO,CAACC,GAAG,CAACvB,YAAY,CAAC;EACzB,oBACI;IAAA,wBACI;MAAK,SAAS,EAAC,MAAM;MAAA,wBACjB;QAEI,IAAI,EAAC,MAAM;QACX,WAAW,EAAC,UAAU;QACtB,SAAS,EAAC,cAAc;QACxB,IAAI,EAAC,SAAS;QACd,KAAK,EAAEN,IAAI,CAACG,OAAQ;QACpB,QAAQ,EAAIc;MAAY;QAAA;QAAA;QAAA;MAAA,QACtB,eACN;QACI,IAAI,EAAC,MAAM;QACX,WAAW,EAAC,aAAa;QACzB,SAAS,EAAC,cAAc;QACxB,IAAI,EAAC,YAAY;QACjB,KAAK,EAAEjB,IAAI,CAACI,UAAW;QACvB,QAAQ,EAAIa;MAAY;QAAA;QAAA;QAAA;MAAA,QAC1B,eACF;QACI,SAAS,EAAC,cAAc;QACxB,OAAO,EAAET,YAAa;QAAA,UACzB;MAED;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACH,eACN;MAAA,wBACA;QAAK,GAAG,EAAER,IAAI,CAACK,WAAY;QAAC,SAAS,EAAG;MAAa;QAAA;QAAA;QAAA;MAAA,QAAE,eACvD;QAAI,SAAS,EAAC,gBAAgB;QAAA,UAAEL,IAAI,CAACG;MAAO;QAAA;QAAA;QAAA;MAAA,QAAM,eAClD;QAAI,SAAS,EAAC,mBAAmB;QAAA,UAAEH,IAAI,CAACI;MAAU;QAAA;QAAA;QAAA;MAAA,QAAM;IAAA;MAAA;MAAA;MAAA;IAAA,QAClD;EAAA;IAAA;IAAA;IAAA;EAAA,QAEP;AAEf;AAAC,GAnEeL,IAAI;AAAA,KAAJA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}